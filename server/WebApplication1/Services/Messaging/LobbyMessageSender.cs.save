using WebApplication1.Models;
using WebApplication1.Utils;

namespace WebApplication1.Services.Messaging;

public static class LobbyMessageSender
{
    public static async Task JoinedAsync(Lobby lobby, Player player)
    {
        await MessageSender.SendToPlayerAsync(player, "lobby_joined", new
        {
            lobbyId = lobby.Id,
            player = new
            {
                name = player.Name,
                role = player.Role,
            }
        });
    }
    public static async Task BroadcastPlayerJoinedAsync(Lobby lobby, Player player)
    {
        await MessageSender.BroadcastLobbyAsync(lobby, "new_player_joined", new
        {
            player = new {
                name = player.Name,
                role = player.Role
            }
        });
    }

    public static async Task BroadcastPlayerList(Lobby lobby)
    {
        var playersData = lobby.Players.Select(p => new
        {
            name = p.Name, //maybe only name is needed  
            role = p.Role,
            id = p.Id  
        }).ToList();

        await MessageSender.BroadcastLobbyAsync(lobby, "player_list", new
        {
            players = playersData
        });
    }
    public static async Task CreateAsync(Lobby lobby, Player player)
    {
        await MessageSender.SendToPlayerAsync(player, "lobby_created", new
        {
            lobbyId = lobby.Id,
            player = new {
                name = player.Name,
                role = player.Role
            }
        });
    }
    public static async Task LeaveAsync(Lobby lobby, Player player)
    {
        await MessageSender.SendToPlayerAsync(player, "exit_lobby", new
        {
            action = "removed",
            lobbyId = lobby.Id,
     });
    }
    public static async Task ErrorMessageAsync(Lobby lobby, Player player)
    {
        await MessageSender.SendToPlayerAsync(player, "failed", new
        {
            action = "failed",
            lobbyId = lobby.Id,
        });
    }
    public static async Task StartGame(Lobby lobby)
    {
        await MessageSender.BroadcastLobbyAsync(lobby, "game_started", new
        {
            action = "started",
        });
    }
}
